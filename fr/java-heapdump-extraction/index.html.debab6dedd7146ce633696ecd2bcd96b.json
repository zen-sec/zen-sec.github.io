{"head":{"title":"Extraire les mots de passes et autres informations depuis un heapdump Java","date":"2017-03-23T00:00:00.000Z","layout":"Post","hero":"/assets/java-heapdump-extractor.jpg","description":"À travers cet article, nous allons voir comment nous pouvons extraire des informations (pour le moins intéressantes) depuis une empreinte…"},"body":"<p>À travers cet article, nous allons voir comment nous pouvons extraire des\ninformations (pour le moins intéressantes) depuis une empreinte mémoire d'une\napplication Java.</p>\n<blockquote>\n<p>Si vous disposez déjà d’une empreinte mémoire, vous pouvez aller directement\nà la <a href=\"#seconde-partie--extraction-des-donn%C3%A9es-int%C3%A9ressantes\">seconde partie</a>.</p>\n</blockquote>\n<blockquote>\n<p>Pour réaliser ces manipulations, vous aurez besoin du <strong>JDK</strong>.\nNous supposons ainsi que les outils <em>jps</em>, <em>jmap</em>, <em>jhat</em> du JDK sont\naccessibles en ligne de commande.</p>\n</blockquote>\n<hr>\n<h2 id=\"première-partie--prélèvement-de-lempreinte-mémoire\"><a href=\"#premi%C3%A8re-partie--pr%C3%A9l%C3%A8vement-de-lempreinte-m%C3%A9moire\" class=\"phenomic-HeadingAnchor\">#</a>Première partie : Prélèvement de l’empreinte mémoire</h2>\n<h3 id=\"0-lancement-de-lapplication\"><a href=\"#0-lancement-de-lapplication\" class=\"phenomic-HeadingAnchor\">#</a>0. Lancement de l'application</h3>\n<p>Pour cet exemple, nous allons prendre le cas d’une application Spring.</p>\n<p>L’application est lancée avec un fichier de configuration\n<em>application.properties</em> à partir d’un <em>snapshot.jar</em></p>\n<pre><code class=\"hljs language-cmd\">java -jar snapshot.jar --spring.config.location=src/main/resources/conf/application.properties</code></pre>\n<h3 id=\"1-récupération-du-pid\"><a href=\"#1-r%C3%A9cup%C3%A9ration-du-pid\" class=\"phenomic-HeadingAnchor\">#</a>1. Récupération du PID</h3>\n<p>Dans notre cas, Spring Boot nous affiche directement le PID, mais dans le\ncas général nous pouvons nous servir de l’utilitaire <em>jps</em> contenu dans le jdk.</p>\n<pre><code class=\"hljs language-cmd\">jps -mlv</code></pre>\n<p>Nous obtenons la liste des processus s'exécutant dans la JVM.</p>\n<p>Jps propose les options suivantes :</p>\n<ul>\n<li>-m : Affiche les arguments du processus</li>\n<li>-l : La localisation complète</li>\n<li>-v : Les arguments ajoutées à la JVM</li>\n<li>-q : Seulement les PID</li>\n</ul>\n<h3 id=\"2-prise-de-lempreinte-mémoire\"><a href=\"#2-prise-de-lempreinte-m%C3%A9moire\" class=\"phenomic-HeadingAnchor\">#</a>2. Prise de l'empreinte mémoire</h3>\n<p>Maintenant que nous avons le PID du processus, nous allons pouvoir réaliser\nun 'live dump' grâce à l’utilitaire <em>jmap</em></p>\n<pre><code class=\"hljs language-cmd\">jmap -dump:live,<span class=\"hljs-built_in\">format</span>=b,file=/tmp/heap.dump <span class=\"hljs-number\">1337</span></code></pre>\n<ul>\n<li><strong><em>1337</em></strong> est a remplacer par votre PID</li>\n<li><strong><em>/tmp/heap.dump</em></strong> est le chemin et le nom de fichier qui sera créée\n(l’extension est au choix, ainsi que le répertoire de destination\net le nom du fichier)</li>\n</ul>\n<blockquote>\n<p><strong>Attention, la taille de votre empreinte mémoire dépend de votre application\net peut être très (très) volumineuse !</strong></p>\n</blockquote>\n<hr>\n<h2 id=\"seconde-partie--extraction-des-données-intéressantes\"><a href=\"#seconde-partie--extraction-des-donn%C3%A9es-int%C3%A9ressantes\" class=\"phenomic-HeadingAnchor\">#</a>Seconde partie : Extraction des données intéressantes</h2>\n<p>Bien, maintenant que nous disposons d’un fichier d’empreinte, nous allons\npouvoir commencer à extraire les informations croustillantes !</p>\n<p>Pour cela nous allons nous appuyer sur l’utilitaire <em>jhat</em> qui va nous\npermettre de lire le dump mémoire et qui nous propose d’exécuter des requêtes\nOQL (Object Query Language) afin de récuperer des objets en particulier</p>\n<pre><code class=\"hljs language-cmd\">jhat -port <span class=\"hljs-number\">7401</span> -J-Xmx4G /tmp/heap.dump</code></pre>\n<ul>\n<li>le port <strong><em>7401</em></strong> sera le port où le service web de jhat tournera\n(choisissez un port de disponible :)</li>\n<li><strong><em>/tmp/heap.dump</em></strong> est le chemin vers le fichier d'empreinte mémoire</li>\n</ul>\n<p>À présent vous pouvez vous rendre sur <a href=\"http://localhost:7401/\">http://localhost:7401/</a> pour apercevoir\nune liste de toutes les classes Java de votre application.</p>\n<p>Mais ce n’est pas ce qui nous intéresse, la partie intéressante se trouve sur\nla page <a href=\"http://localhost:7401/oql/\">http://localhost:7401/oql/</a></p>\n<p>Cette page permet d’exécuter des requêtes OQL pour extraire ce qui nous intéresse.</p>\n<hr>\n<h3 id=\"1-le-cas-dune-application-spring\"><a href=\"#1-le-cas-dune-application-spring\" class=\"phenomic-HeadingAnchor\">#</a>1.\tLe cas d’une application Spring</h3>\n<p>Dans notre exemple, nous avons pris le cas d’une application Spring avec un\nfichier de configuration <em>application.properties</em></p>\n<p>Voici le contenu de notre fichier :</p>\n<pre><code class=\"hljs language-x\"><span class=\"hljs-comment\"># Database Configuration</span>\ndatasource.<span class=\"hljs-attr\">driver</span> = org.postgresql.Driver\ndatasource.<span class=\"hljs-attr\">url</span> = jdbc:postgresql://localhost:<span class=\"hljs-number\">1234</span>/test\ndatasource.<span class=\"hljs-attr\">username</span> = postgresUSERNAME\ndatasource.<span class=\"hljs-attr\">password</span> = postgresPASSWORD\n\n<span class=\"hljs-comment\"># Security</span>\nmanagement.security.enabled: <span class=\"hljs-literal\">true</span>\nsecurity.basic.enabled: <span class=\"hljs-literal\">true</span>\nsecurity.user.<span class=\"hljs-attr\">login</span> = this_is_the_user_login\nsecurity.user.<span class=\"hljs-attr\">password</span> = this_is_the_user_password\nsecurity.admin.<span class=\"hljs-attr\">login</span> = this_is_the_admin_login\nsecurity.admin.<span class=\"hljs-attr\">password</span> = this_is_the_admin_password\n\nendpoints.enabled: <span class=\"hljs-literal\">false</span>\n\nendpoints.shutdown.id: shutdown\nendpoints.shutdown.sensitive: <span class=\"hljs-literal\">true</span>\nendpoints.shutdown.enabled: <span class=\"hljs-literal\">true</span>\n\nendpoints.health.id: health\nendpoints.health.sensitive: <span class=\"hljs-literal\">false</span>\nendpoints.health.enabled: <span class=\"hljs-literal\">true</span>\n\n<span class=\"hljs-comment\"># File max size</span>\nspring.http.multipart.<span class=\"hljs-attr\">max-file-size=5MB</span></code></pre>\n<h4 id=\"comment-ces-données-sont-gérées-\"><a href=\"#comment-ces-donn%C3%A9es-sont-g%C3%A9r%C3%A9es-\" class=\"phenomic-HeadingAnchor\">#</a>Comment ces données sont gérées ?</h4>\n<h5 id=\"version-courte\"><a href=\"#version-courte\" class=\"phenomic-HeadingAnchor\">#</a>Version courte</h5>\n<p>Ces données sont stockées sous forme de <em>String</em> dans une classe\n<em>org.springframework.core.env.PropertiesPropertySource</em></p>\n<h5 id=\"version-complète\"><a href=\"#version-compl%C3%A8te\" class=\"phenomic-HeadingAnchor\">#</a>Version complète</h5>\n<p>Voici un schéma de qualité :</p>\n<p><img src=\"/assets/java-heapdump-extractor(1).png\" alt=\"schéma tout moche\"></p>\n<h4 id=\"comment-je-peux-les-extraire-de-mon-dump-\"><a href=\"#comment-je-peux-les-extraire-de-mon-dump-\" class=\"phenomic-HeadingAnchor\">#</a>Comment je peux les extraire de mon dump ?</h4>\n<p>Pas de panique, voici la requête pour extraire les informations :</p>\n<pre><code class=\"hljs language-js\">select\n filter(\n  map(pps.source.table,\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">it</span>) </span>{\n      <span class=\"hljs-keyword\">if</span>(it != <span class=\"hljs-literal\">null</span>)\n        <span class=\"hljs-keyword\">return</span> it.key.toString() + <span class=\"hljs-string\">' = '</span> + it.value.toString();\n    }\n  ),\n  <span class=\"hljs-string\">\"it != null\"</span>\n )\n<span class=\"hljs-keyword\">from</span> org.springframework.core.env.PropertiesPropertySource pps</code></pre>\n<p>Et le lien <em>ready to eat</em> : <a href=\"http://localhost:7401/oql/?query=select+filter(map(pps.source.table%252Cfunction(it)%7Bif(it!%253Dnull)return+it.key.toString()%252B&#x27;+%253D+&#x27;%252Bit.value.toString()%253B%7D)%252C%22it!%253Dnull%22)+from+org.springframework.core.env.PropertiesPropertySource+pps\">http://localhost:7401/oql/?query=select+filter%28map%28pps.source.table%2Cfunction%28it%29%7Bif%28it%21%3Dnull%29return+it.key.toString%28%29%2B%27+%3D+%27%2Bit.value.toString%28%29%3B%7D%29%2C%22it%21%3Dnull%22%29+from+org.springframework.core.env.PropertiesPropertySource+pps</a></p>\n<p><img src=\"/assets/java-heapdump-extractor(4).png\" alt=\"résultat\"></p>\n<h4 id=\"je-veux-comprendre-la-requête-\"><a href=\"#je-veux-comprendre-la-requ%C3%AAte-\" class=\"phenomic-HeadingAnchor\">#</a>Je veux comprendre la requête !</h4>\n<blockquote>\n<p>Comme vous l’avez vu sur le schéma de qualité, la classe\n<em>PropertiesPropertySource</em> posséde un champ <em>source</em> possédant un champ\n<em>table</em> que nous parcourons grâce à la fonction <em>map</em>\n(cette fonction permet d'effectuer une action <em>function(it)</em> sur chaque objet\ncontenu dans l’objet en paramètre)</p>\n</blockquote>\n<blockquote>\n<p>La fonction filter nous sert à éliminer les champs vides</p>\n</blockquote>\n<hr>\n<h3 id=\"2-le-cas-général\"><a href=\"#2-le-cas-g%C3%A9n%C3%A9ral\" class=\"phenomic-HeadingAnchor\">#</a>2. Le cas général</h3>\n<p>Dans le cas d'une application quelconque (Spring inclus),\nnous souhaitons extraire des champs du type <em>password</em> et autre.</p>\n<p>Pour cela, voici la requête qui récupère tous les champs intéressants :</p>\n<pre><code class=\"hljs language-js\">select filter(map(\n  map(filter(heap.classes(), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">it</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> interests = <span class=\"hljs-regexp\">/login|password|username|database|creds|credential|p4ss|l0g1n|l0gin|us3r|admin|4dm1n/</span>;\n\n    <span class=\"hljs-keyword\">for</span>(field <span class=\"hljs-keyword\">in</span> it.fields)     \n      <span class=\"hljs-keyword\">if</span>(interests.test(it.fields[field].name.toLowerCase())) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }), <span class=\"hljs-string\">\"heap.objects(it, true)\"</span>), <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">it</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> res = <span class=\"hljs-string\">\"\"</span>;\n    <span class=\"hljs-keyword\">var</span> interests = <span class=\"hljs-regexp\">/login|password|username|database|creds|credential|p4ss|l0g1n|l0gin|us3r|admin|4dm1n/</span>;\n\n    <span class=\"hljs-keyword\">while</span> (it.hasMoreElements()) {\n      it = it.nextElement();\n      <span class=\"hljs-keyword\">for</span>(field <span class=\"hljs-keyword\">in</span> it) {\n        <span class=\"hljs-keyword\">if</span>(interests.test(field.toLowerCase())) {\n          <span class=\"hljs-keyword\">if</span>(res !== <span class=\"hljs-string\">''</span>)\n            res += <span class=\"hljs-string\">', '</span>;\n          res += field + <span class=\"hljs-string\">' : '</span> + (it[field] ? (it[field].value ?\n              it[field].value.toString() : it[field].toString()) : it[field]);\n        }\n      }\n    }\n    <span class=\"hljs-keyword\">return</span> res;\n  }), <span class=\"hljs-string\">\"it\"</span>);</code></pre>\n<p>Et le résultat :\n<img src=\"/assets/java-heapdump-extractor(2).png\" alt=\"résultat\"></p>\n<h4 id=\"cest-génial--mais-comment-ça-marche-\"><a href=\"#cest-g%C3%A9nial--mais-comment-%C3%A7a-marche-\" class=\"phenomic-HeadingAnchor\">#</a>C'est génial ! Mais comment ça marche ?</h4>\n<p>Dans notre petite application Spring, nous avions 347000 objets (= instances)\ndans notre dump. Faire un tri sur les objets est donc tout juste impossible.</p>\n<p>La solution consiste à récupérer toutes les classes disponibles et de trier\ncelles comportant des attributs du type :</p>\n<p><em>Login, password, username, database, credential…</em></p>\n<blockquote>\n<p>Vous retrouverez ces mots clefs dans une <em>expression régulière</em> que vous\npouvez bien sûr personnaliser !\n(Attention, vous pouvez vite vous retrouver avec beaucoup trop d’objets !)</p>\n</blockquote>\n<p>Enfin, on récupère toutes les instances de ces classes, en n’affichant que les\nchamps que l’on trouve intéressants</p>\n<hr>\n<h3 id=\"3-les-mots-de-passes-sont-dans-des-champs-static-comment-je-fais-\"><a href=\"#3-les-mots-de-passes-sont-dans-des-champs-static-comment-je-fais-\" class=\"phenomic-HeadingAnchor\">#</a>3. Les mots de passes sont dans des champs <em>static</em> comment je fais ?</h3>\n<p>Pas de soucis, voici une requête qui fera le <em>taf</em></p>\n<pre><code class=\"hljs language-js\">select filter(\n  map(filter(heap.classes(), <span class=\"hljs-string\">\"it.statics\"</span>),\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">it</span>) </span>{\n      <span class=\"hljs-keyword\">var</span> res = <span class=\"hljs-string\">''</span>;\n      <span class=\"hljs-keyword\">var</span> interests = <span class=\"hljs-regexp\">/login|password|username|database|creds|credential|p4ss|l0g1n|l0gin|us3r|admin|4dm1n/</span>;\n      <span class=\"hljs-keyword\">for</span> (field <span class=\"hljs-keyword\">in</span> it.statics) {\n        <span class=\"hljs-keyword\">if</span>(interests.test(field.toLowerCase())) {\n          <span class=\"hljs-keyword\">if</span>(res !== <span class=\"hljs-string\">''</span>)\n            res += <span class=\"hljs-string\">', '</span>;\n          res += field + <span class=\"hljs-string\">' : '</span> + it.statics[field].toString();\n        }\n      }\n      <span class=\"hljs-keyword\">return</span> res;\n    }\n  ), <span class=\"hljs-string\">\"it\"</span>);</code></pre>\n<blockquote>\n<p>Pas de secrets, on récupère les classes avec des champs statics, et on trie\ncelles avec des noms de champs intéressants !  </p>\n</blockquote>\n<p><img src=\"/assets/java-heapdump-extractor(3).png\" alt=\"résultat\"></p>\n<hr>\n<h2 id=\"partie-bonus--metasploit-post-module\"><a href=\"#partie-bonus--metasploit-post-module\" class=\"phenomic-HeadingAnchor\">#</a>Partie bonus : Metasploit Post Module</h2>\n<p>Vous avez un accès à un shell avec le JDK d’installé et une application java qui tourne ?</p>\n<p>Voici le module qui fera tout cela pour vous !</p>\n<p><a href=\"https://asciinema.org/a/108492?speed=2.5\"><img src=\"https://asciinema.org/a/108492.png\" alt=\"asciicast\"></a></p>\n<hr>\n<blockquote>\n<p><strong> Merci d’avoir lu cet article ! N'hésitez pas à soumettre vos suggestions \ndans les commentaires ;)</strong></p>\n</blockquote>\n","__filename":"fr/java-heapdump-extraction.md","__url":"/fr/java-heapdump-extraction/","__resourceUrl":"/fr/java-heapdump-extraction/index.html","__dataUrl":"/fr/java-heapdump-extraction/index.html.debab6dedd7146ce633696ecd2bcd96b.json"}